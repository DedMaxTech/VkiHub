from contextlib import asynccontextmanager
import random
from typing import AsyncGenerator, Coroutine
from aiogram import Router, html, flags
import aiogram
from aiogram.filters import Command
from aiogram import types , flags, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import MagicData

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from fuzzywuzzy import process, fuzz

from db.models import User
from messages.basic import *
from config import cfg
from handlers.basic import profile
from modules.nsu_cab import *

router = Router()



@router.message(Command("marks"))
@router.callback_query(F.data == CD_MARKS_V2)
@flags.student
@flags.command('–û—Ü–µ–Ω–∫–∏')
async def cmd_marksv2(msg: types.Message, session: AsyncSession, user:User, student: Student):
    if (isinstance(msg, types.CallbackQuery)):
        await msg.answer()
        msg = msg.message

    await msg.answer(f'–ü–æ—Å–ª–µ–¥–Ω–∏–µ {str(user.marks_count) + "–æ—Ü–µ–Ω–æ–∫" if user.marks_count >= 12 or not user.marks_count else "–æ—Ü–µ–Ω–æ–∫"}\n{user.repr_mark_row}\n–°—Ç–∞—Ä—ã–µ‚û°Ô∏è–ù–æ–≤—ã–µ',
                    reply_markup=build_marks_kb(cfg.subjects[user.id], user.marks_row, user.marks_count, add_buttons=[[InlineKeyboardButton(text='ü™Ñ–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫', callback_data=CD_CURTOMIZE_MARKS)]]))


@router.callback_query(F.data == '1')
async def callback_marks(cb: types.CallbackQuery, session: AsyncSession, user:User):
    await cb.answer('–ó–∞—á–µ–º –∂–º–∞–ª')

@router.inline_query(F.query.startswith('!s'))
async def inline_marks(inline_query: types.InlineQuery, session: AsyncSession, user:User):
    # return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–û—Ü–µ–Ω–∫–∏ –Ω–µ —Ä–æ–±–∏', switch_pm_parameter='abc')
    if not user.login or not user.password:
        return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ù–ì–£', switch_pm_parameter='abc')
    
    try:
        if user.cookie: s = Student(user.cookie)
        else: 
            s = await Student.auth(user.login, decrypt(user.password))
            user.cookie = s.cookie
            await session.commit()
        if not cfg.subjects.get(user.id): 
            try:
                cfg.subjects[user.id] = [await s.subject_detail(i.link) for i in await s.latest_marks()] 
            except DataMissingException:
                return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–û—Ü–µ–Ω–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ', switch_pm_parameter='abc')
        subj = next((i for i in cfg.subjects[user.id] if i.name == inline_query.query.replace('!s', '').strip()), None)
        if not subj: return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω', switch_pm_parameter='abc')
        
        await inline_query.answer(results=[types.InlineQueryResultArticle(
            id=str(random.randint(0,10000000)),title=f'{i.date}{", "+mark(i.mark, user.marks_row, True, False) if i.mark else ""}{", –ù" if i.is_absent else ""}{", ‚ö†Ô∏è"+i.type + " "  if i.type else ""}',  # + "‚¨úÔ∏è"*20
            thumbnail_url=get_thumb(i.mark, i.is_absent),
            input_message_content=types.InputTextMessageContent(message_text=f'{html.bold(subj.name)}\n{i.date}{f"({i.type})" if i.type else ""}: {mark(i.mark, user.marks_row, True, False)} {"–ù" if i.is_absent else ""}\n{i.theme}'),
            description=i.theme
        ) for i in reversed(subj.marks) if not i.are_empty], is_personal=True,cache_time=60, switch_pm_parameter='abc', switch_pm_text=subj.name)
        await s.close()
    except WrongCookieException:
        user.cookie = None
        await session.commit()
        return await inline_marks(inline_query, session, user)
    except LoginFailedException:
        return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –ù–ì–£', switch_pm_parameter='abc')

@router.inline_query(F.query =='–ú–æ–∏ –ø—Ä–∏–∫–∞–∑—ã')
async def inline_marks(inline_query: types.InlineQuery, session: AsyncSession, user:User):
    # return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–û—Ü–µ–Ω–∫–∏ –Ω–µ —Ä–æ–±–∏', switch_pm_parameter='abc')
    if not user.login or not user.password:
        return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ù–ì–£', switch_pm_parameter='abc')
    
    try:
        if user.cookie: s = Student(user.cookie)
        else: 
            s = await Student.auth(user.login, decrypt(user.password))
            user.cookie = s.cookie
            await session.commit()
        
        await inline_query.answer(results=[types.InlineQueryResultArticle(
            id=str(random.randint(0,10000000)),title=i.title, 
            input_message_content=types.InputTextMessageContent(message_text=f'{html.bold(i.title)}\n{i.body.strip()}'),
            description=i.body
        ) for i in await s.orders()], is_personal=True,cache_time=60, switch_pm_parameter='abc', switch_pm_text="–ú–æ–∏ –ø—Ä–∏–∫–∞–∑—ã:")
        await s.close()
    except aiogram.exceptions.TelegramBadRequest as e: logger.error(e)
    except WrongCookieException:
        user.cookie = None
        await session.commit()
        return await inline_marks(inline_query, session, user)
    except LoginFailedException:
        return await inline_query.answer(results=[], is_personal=True,cache_time=5, switch_pm_text='–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –ù–ì–£', switch_pm_parameter='abc')
