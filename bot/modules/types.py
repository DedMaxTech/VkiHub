from dataclasses import dataclass, field
import datetime
import re
from aiogram import html
from aiogram.utils.deep_linking import create_start_link
import enum
from db.models import User

@dataclass
class Timetable:
    '''"–í—Ä–µ–º–µ–Ω–Ω–æ–µ" —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞'''
    
    name:str
    '''–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ —É–∫–æ—Ä–æ—á–µ–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞'''
    link:str
    '''–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–¥—Ñ'''
    date: datetime.datetime
    '''–ó–∞–ø–∞—Ä—Å–µ–Ω–∞—è –¥–∞—Ç–∞'''
    images: list[str]
    '''–°–ø–∏—Å–æ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã—Ö –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'''
    groups: dict[str, list['WeekDay']]
    '''–ó–∞–ø–∞—Ä—Å–µ–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º'''
    text_content:str = ''
    '''–î–µ–ø—Ä–µ–∫–µ–π—Ç–µ–¥, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –∫–∞–∫ –∞–Ω–∞–ª–æ–≥ —Ö—ç—à–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'''
    
    def __eq__(self, other: object) -> bool:
        if isinstance(other, Timetable): return self.name == other.name
        else: return other == self.name
    
    @property
    def as_str(self):
        return f'{self.name} –æ—Ç {self.date.strftime("%d.%m.%Y")}'
    
    def __str__(self) -> str:
        return f"<Timetable {self.name} for {self.date}>"

base_abbreviation = {
    "–∞—É–¥.": "",
    "–æ—Ç–º–µ–Ω–∞": "",
    "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":"",
    "—Å–µ–º–∏–Ω–∞—Ä": "üöå",
    "–ª–µ–∫—Ü–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ": "üõè",
    "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ª–µ–∫—Ü–∏—è": "üõè",
    "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –ª–µ–∫—Ü–∏—è": "üõè",
    "–ø—Ä–æ–∏–∑–≤.–ø—Ä.": "üõ†",
    "–ø—Ä–æ–∏–∑. –ø—Ä–∞–∫—Ç.": "üõ†",
    "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ": "üõ†",
    "—É—á. –ø—Ä–∞–∫—Ç–∏–∫–∞": "üõ†",
    "–£—á. –ü—Ä.": "üõ†",
    "–ü—Ä–æ–∏–∑–≤. –ø—Ä.": "üõ†",
    "–ª–∞–±.": "üî¨",
    "  ": " ",
}
default_abbreviation = {
    **base_abbreviation,
    "–ò—Å—Ç–æ—Ä–∏—è": "–ò—Å—Ç–æ—Ä–∏—è",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "–§–∏–∑–∏–∫–∞": "–§–∏–∑–∏–∫–∞",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–•–∏–º–∏—è": "–•–∏–º–∏—è",
    "–ë–∏–æ–ª–æ–≥–∏—è": "–ë–∏–æ–ª–æ–≥–∏—è",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è": "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    
    "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ":"–°–∏—Å—Ç. –ø—Ä–æ–≥—Ä.",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ü–†–ò–õ–û–ñ–ï–ù–ò–ô": "–í–µ–±",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è": "–¢–†–ò–ó",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û": "–ò–°–†–ü–û",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è": "–ò–°–†–ü–û",
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π":"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ.–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –æ—Ç—Ä–∞—Å–ª–∏": "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
    "–ú–µ–Ω–µ–Ω–¥–∂–º–µ–Ω—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–ú–µ–Ω–µ–Ω–¥–∂–º–µ–Ω—Ç",
    "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": "–ú–∞—Ç. –º–æ–¥–µ–ª.",
    "–û—Å–Ω–æ–≤—ã —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏": "–§–∏–ª–æ—Å–æ—Ñ–∏—è",
    "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã": "–û–ë–ñ",
    "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏": "–ö–æ–º–ø. —Å–µ—Ç–∏",
    "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ä–µ–¥—ã": "–û–ø–µ—Ä. —Å–∏—Å—Ç–µ–º—ã",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "–ò–Ω—Ñ. —Ç–µ—Ö.",
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–ë–ñ",
    "–≠–ª–µ–º–µ–Ω—Ç—ã –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏": "–í—ã—à–º–∞—Ç",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "–ò–Ω—Ñ. —Ç–µ—Ö.",
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤": "–ê–ø–ø–∞—Ä. —Å—Ä–µ–¥—Å—Ç–≤–∞",
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω. —Å—Ä–µ–¥—Å—Ç–≤": "–ê–ø–ø–∞—Ä. —Å—Ä–µ–¥—Å—Ç–≤–∞",
    "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º. –ò –ø—Ä–æ–≥—Ä–∞–º–º.": "–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è",
    "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è": "–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π": "–ü—Ä–æ–≥. –º–æ–¥—É–ª–∏",
    "–ü—Ä–∞–≤–æ–≤–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ.–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–ü—Ä–∞–≤–æ",
    "–ü–ú.04. –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ü–û –∫–æ–º–ø. —Å–∏—Å—Ç.": "–ö–æ–º–ø. —Å–∏—Å—Ç.",
    "–ü–ú.11. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –ë–î": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ë–î",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –±–¥": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ë–î",
    "–°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–ò–Ø, –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ": "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ",
    
    "–ú–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã": "–ú–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã",
    "–ü–ú.01.01. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤": "–¶–∏—Ñ—Ä–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤": "–¶–∏—Ñ—Ä–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤": "–°–µ—Ç–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤": "–°–µ—Ç–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "–ü–ú.03.–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤": "–†–µ–º–æ–Ω—Ç —Å–∏—Å—Ç–µ–º",
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤": "–†–µ–º–æ–Ω—Ç —Å–∏—Å—Ç–µ–º",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤": "–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º":"–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º"
}

@dataclass
class Lesson:
    '''–Ø—á–µ–π–∫–∞-—É—Ä–æ–∫ —Å –ø–∞—Ä—Å–∞ –ø–¥—Ñ–∫–∏'''
    
    content: str
    '''–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'''
    number: str
    '''–ù–æ–º–µ—Ä –ø–∞—Ä—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å .5)'''
    group: str
    '''–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫)'''
    teacher: str | None
    '''–°–ø–∞—Ä—Å–µ–Ω—ã–π —É—á–∏—Ç–µ–ª—å'''
    classroom: str | None
    '''–°–ø–∞—Ä—Å–µ–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'''
    co_groups: list[str]
    '''–ì—Ä—É–ø–ø—ã, —É –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –ø–∞—Ä–∞'''
    raw: str
    '''–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —è—á–µ–π–∫–∏ (–ø–æ –ø—Ä–∏–∫–æ–ª—É)'''
    weekday: 'WeekDay'
    '''–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–∞—Ä—ã'''
    canceled: bool = False
    '''–°–ø–∞—Ä—Å–µ–Ω–∞—è –æ—Ç–º–µ–Ω–∞'''
    half_lesson_detected: bool = False
    '''–ù–∞ —ç—Ç–æ–º –Ω–æ–º–µ—Ä–µ –ø–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—É–ø–∞—Ä—ã'''
    
    async def print(self, bot=None, user: User=None, hide_teacher = False, hide_my_group = True):
        t=f"{self.text_number}: {'üö´' if self.canceled else ''}{self.content or html.italic('       –ø—Ä–æ–ø—É—Å–∫ ')}"
        
        if self.content:
            if hide_teacher: t = t.replace(self.teacher, '')
            else: t = t.replace(self.teacher, html.link(self.teacher, await create_start_link(bot, 't:'+self.teacher, True)) if bot else self.teacher)
            
            if hide_my_group:
                if self.other_cogroups and '–¥–∏—Å—Ç–∞–Ω—Ü' not in self.content.lower(): t+=f' (+ {await group_groups(self.other_cogroups, bot)})'
            else: t += (' ' if hide_teacher else '| ') + await group_groups(self.co_groups, bot)   
        
        
        if self.classroom: t = t.replace(self.classroom, html.underline(html.link(self.classroom, await create_start_link(bot, 't:'+self.classroom, True)) if bot else self.classroom))
        if self.canceled: t = html.strikethrough(t)
        if t[-1]=='.': t = t[:-1]
        if self.half_lesson_detected: t+=f'\n‚ö†Ô∏è–ü–æ–ª—É–ø–∞—Ä–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {self.number.split(".")[0]} –ø–∞—Ä—É. {html.link("–ü–æ—á–µ–º—É —Ç–∞–∫?", "https://github.com/DedMaxTech/VkiHub/issues/2")}'
        if user:
            for k, v in (default_abbreviation if user.abbrevioations is None else user.abbrevioations).items():
                t = re.sub(k, v, t, flags=re.IGNORECASE)
        return t.strip()
    @property
    def text_number(self): #–∑–∞–º–µ–Ω–∞ —Ü–∏—Ñ—Ä—ã –Ω–∞ —ç–º–æ–¥–∑–∏
        if self.number[0].isdigit():
            return f'{"1Ô∏è‚É£,2Ô∏è‚É£,3Ô∏è‚É£,4Ô∏è‚É£,5Ô∏è‚É£".split(",")[int(self.number[0])-1]}{self.number[1:]}'
        else: return self.number
    
    @property
    def other_cogroups(self): # todo refactor
        return [gr for gr in self.co_groups if gr[:-1 if '–¥–∏—Å—Ç–∞–Ω—Ü' not in self.content.lower() else -2] != self.group[:-1 if '–¥–∏—Å—Ç–∞–Ω—Ü' not in self.content.lower() else -2]]

weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
async def group_groups(groups: list[str],bot=None):
    '''–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—ã –≤ –≥—Ä—É–ø–ø—ã...'''
    res = ''
    groups = groups.copy()
    groups.sort()
    while groups:
        t = groups[0]
        res += html.link(t, await create_start_link(bot, 't:'+t, True)) if bot else t
        if t[-1]!='2' and t[:-1]+'2' in groups: 
            groups.remove(t[:-1]+'2')
            res += '/' + (html.link(t[-2]+'2',await create_start_link(bot, 't:'+t[:-1]+'2', True)) if bot else t[-2]+'2')
        groups.remove(t)
        res += ', '
    return res[:-2]



class DiffType(enum.Enum):
    CANCELED = 'üî¥–û—Ç–º–µ–Ω–∞'
    NEW = 'üü¢–ù–æ–≤–∞—è'
    REPLACED = 'üîµ–ó–∞–º–µ–Ω–∞'
    MOVED = 'üü°–ü–µ—Ä–µ–Ω–æ—Å'
    
    
@dataclass
class Diff:
    old: Lesson = None
    new: Lesson = None
    new_day: 'WeekDay' = None
    
    async def print(self, bot, user: User=None, hide_teacher = False, hide_my_group = True):
        if self.type == DiffType.CANCELED: return f"{self.type.value}: {await self.old.print(bot, user, hide_teacher, hide_my_group)}"
        if self.type == DiffType.NEW: return f"{self.type.value}: {await self.new.print(bot, user, hide_teacher, hide_my_group)}"
        if self.type == DiffType.REPLACED: return f"{self.type.value}: {await self.old.print(bot, user, hide_teacher, hide_my_group)}\n–Ω–∞ {await self.new.print(bot, user, hide_teacher, hide_my_group)}"
        if self.type == DiffType.MOVED: 
            s = f"{self.type.value}: {await self.old.print(bot, user, hide_teacher, hide_my_group)}"
            if self.old.weekday.weekday != self.new_day.weekday or self.old.number !=self.new.number: s += f"\n–Ω–∞ {html.underline(weekdays[self.new_day.weekday])} {self.new_day.date} {self.new.text_number} –ø–∞—Ä–æ–π"
            if self.old.classroom != self.new.classroom: s += f"\n–≤ –∫–∞–±–∏–Ω–µ—Ç {self.new.classroom}"
            return s
    
    @property
    def type(self) -> DiffType:
        match (self.old, self.new, self.new_day):
            case (_,None, None): return DiffType.CANCELED
            case (None,_, None): return DiffType.NEW
            case (_,_, None): return DiffType.REPLACED
            case (_,_,_): return DiffType.MOVED
    
    @staticmethod
    def changes(num:int):
        if num == 1: return '–∏–∑–º–µ–Ω–µ–Ω–∏–µ'
        if 1 < num < 5: return '–∏–∑–º–µ–Ω–µ–Ω–∏—è'
        return '–∏–∑–º–µ–Ω–µ–Ω–∏–π'

@dataclass()
class WeekDay:
    '''–ü–∞—Ä—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏'''
    
    weekday:int
    '''–ò–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏'''
    date:str
    '''–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.20, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π (—á–∞—Å—Ç–æ)'''
    lessons: list[Lesson]
    '''–£—Ä–æ–∫–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å'''
    diffs: list[Diff] = field(default_factory=list)
    '''–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å'''
    
    async def print(self, bot=None, user: User=None, hide_teacher = False, hide_my_group = True):
        s=html.bold(weekdays[self.weekday].title())+' '+html.underline(self.date)+'\n'
        # s += '\n'.join([await i.print(bot, for_teacher) for i in self.lessons])
        for i in self.lessons: 
            cur_num_lessons = [x for x in self.lessons if x.content and x.number[0] == i.number[0]]
            if len(cur_num_lessons) > 1:
                index = cur_num_lessons.index(i)
                if index==0: s+='‚îè'
                elif index == len(cur_num_lessons)-1: s+='‚îó'
                else: s+='‚î£'
            s += await i.print(bot, user, hide_teacher, hide_my_group) + '\n'
        if not self.lessons: s+='–ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        return s

    async def print_diffs(self, bot=None, user: User=None, hide_teacher = False, hide_my_group = True):
        return html.bold(weekdays[self.weekday].title())+' '+html.underline(self.date)+'\n'+'\n\n'.join([await i.print(bot, user, hide_teacher, hide_my_group) for i in self.diffs])
    def __hash__(self):
        return hash((self.weekday, self.date))

class ConvertingError(Exception):
    pass

@dataclass
class Contact:
    '''–ö–æ–Ω—Ç–∞–∫—Ç —Å –≥—É–≥–ª –∫–∞–±–∏–Ω–µ—Ç–∞'''
    
    name: str
    '''–ò–º—è, –æ–±—ã—á–Ω–æ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'''
    email: str
    '''–ò–º–µ–∏–ª'''
    photo: str
    '''–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'''
    title: str
    '''–î–æ–ª–∂–Ω–æ—Å—Ç—å, —É —Å—Ç—É–¥–Ω–µ–π —ç—Ç–æ –≥—Ä—É–ø–ø–∞, —É –ø—Ä–µ–ø–æ–¥–æ–≤ –∫–∞—Ñ–µ–¥—Ä–∞ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å'''
    is_student: bool
    '''—Ç—Ä—É –µ—Å–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —ç—Ç–æ –≥—Ä—É–ø–ø–∞'''
    tg_username: str|None = None
    '''–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ'''
    def str(self):
        tg_part = f"Tg: @{self.tg_username}" if self.tg_username else ""
        email_part = f"\n{self.email}" if self.email else ""
        return f"{self.name}\n{tg_part}{email_part}\n{self.title}"

def mark(m, marks_row='üü¢,üü£,üü†,üî¥,üö∑', add_mark=False, compress=True, format=' {v}'):
    '''–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É'''
    marks_row = marks_row.split(',')
    match m:
        case '5': v = marks_row[0]
        case '4': v = marks_row[1]
        case '3': v = marks_row[2]
        case '2': v = marks_row[3]
        case '1': v = '‚ö†Ô∏è'
        case '–ù': v = marks_row[4]
        case '': v = ''
        case _: v = format.format(v=m).title()
    if add_mark and m in '5432–ù' and v not in '5Ô∏è‚É£4Ô∏è‚É£3Ô∏è‚É£2Ô∏è‚É£': v= m+v
    if compress: v = v.replace('–ó–∞—á—Ç–µ–Ω–æ', '–ó–∞—á')
    return v

def get_thumb(mark, are_absent):
    '''–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –æ—Ü–µ–Ω–∫–∏'''
    # TODO - –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ø–ª–æ–∞–¥
    match mark, are_absent:
        case '2', False: return 'https://i.imgur.com/a3u0JJl.png'
        case '2', True: return 'https://i.imgur.com/qxSw0pc.png'
        case '3', False: return 'https://i.imgur.com/pmrmKN3.png'
        case '3', True: return 'https://i.imgur.com/73O5Ths.png'
        case '4', False: return 'https://i.imgur.com/Y5cc17d.png'
        case '4', True: return 'https://i.imgur.com/WI9abmH.png'
        case '5', False: return 'https://i.imgur.com/AR8bEkf.png'
        case '5', True: return 'https://i.imgur.com/jIRavUB.png'
        case '–ù', False: return 'https://i.imgur.com/Uc2w2Nb.png'
        case '–ù', True: return 'https://i.imgur.com/Uc2w2Nb.png'
        case '', True: return 'https://i.imgur.com/Uc2w2Nb.png'
        case _, False: return 'https://i.imgur.com/0o6eY5C.png'
        case _, True: return 'https://i.imgur.com/RAiChwL.png'
        

@dataclass
class Mark:
    '''–û—Ü–µ–Ω–∫–∞ —Å –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–≥—É'''
    
    date: str
    '''–î–∞—Ç–∞, –æ–±—ã—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.24'''
    type: str
    '''–¢–∏–ø –æ—Ü–µ–Ω–∫–∏, –æ–±—ã—á–Ω–æ –ø—É—Å—Ç–æ–π, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ö–ù –∏ —Ç–¥'''
    is_absent: bool
    '''–°—Ç–æ–∏—Ç –ª–∏ –ù–∫–∞'''
    mark: str
    '''–û—Ü–µ–Ω–∫–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ, —á–∏—Å–ª–æ —Å +/-, –∑–∞—á—ë—Ç, –¥–æ–ª–≥ –∏ —Ç–¥'''
    theme: str
    '''–¢–µ–º–∞ —É—Ä–æ–∫–∞'''
    
    @property
    def are_empty(self):
        return not(self.is_absent or self.mark)
    
    def __eq__(self, value: object) -> bool:
        if isinstance(value, Mark): return self.date == value.mark
        else: return value == self.date
    
    def __str__(self): # {f"({self.type})" if self.type else ""}
        return f'{self.date}: {"üö∑" if self.is_absent else ""}{mark(self.mark)} {self.theme}' 

@dataclass
class Subject:
    '''–ü—Ä–µ–¥–º–µ—Ç —Å –æ—Ü–µ–Ω–∫–∞–º–∏ —Å –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–≥—É'''
    
    name: str
    '''–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞'''
    marks: list[Mark]
    '''–í—Å–µ –æ—Ü–µ–Ω–∫–∏'''
    link: str
    '''–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏'''
    
    @property
    def marks_str(self):
        # return ''.join([mark(m.mark) for m in self.marks])
        return ''.join([mark(self.marks[i].mark) if i < len(self.marks) else ' '*7  for i in range(5)])
        
    

@dataclass
class Profile:
    '''–õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–≥—É'''
    
    name: str
    '''–ò–º—è, –æ–±—ã—á–Ω–æ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'''
    group: str
    '''–ì—Ä—É–ø–ø–∞'''
    image: str
    '''–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É. Note: –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–≤–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'''
    
@dataclass
class Order:
    '''–ü—Ä–∏–∫–∞–∑ —Å –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–≥—É'''
    
    title: str
    '''–ù–∞–∑–≤–∞–Ω–∏–µ'''
    body: str
    '''–¢–µ–ª–æ –ø—Ä–∏–∫–∞–∑–∞'''
    